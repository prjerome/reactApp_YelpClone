{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/Searchbar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","Searchbar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","handleSortByChange","sortByOptions","sortByOption","setState","e","target","value","event","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","renderSortByOptions","onChange","placeholder","Yelp","search","queryString","fetch","headers","Authorization","then","response","json","jsonResponse","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f73484d8.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\n\nclass Business extends React.Component {\n    render() {\n        return(\n       <div className=\"Business\">\n  <div className=\"image-container\">\n    <img src={this.props.business.imageSrc} alt=''/>\n  </div>\n  <h2>{this.props.business.name}</h2>\n  <div className=\"Business-information\">\n    <div className=\"Business-address\">\n      <p>{this.props.business.address}</p>\n      <p>{this.props.business.city}</p>\n      <p>{this.props.business.state} {this.props.business.zipCode}</p>\n    </div>\n    <div className=\"Business-reviews\">\n      <h3>{this.props.business.category}</h3>\n      <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\n      <p>{`${this.props.business.reviewCount} reviews`}</p>\n    </div>\n  </div>\n        </div> \n        )\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport  Business from '../Business/Business';\n\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {this.props.businesses.map((business) => {\n                 return <Business business={business} key={business.id}/>\n                })}\n            </div>\n        )\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\n\n\nclass Searchbar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term:\"\",\n            location:\"\",\n            sortBy: \"best_match\"\n        };\n\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSortByChange = this.handleSortByChange.bind(this);\n        \n         this.sortByOptions = {\n            \"Best Match\": \"best_match\",\n            \"Highest Rated\": \"rating\",\n            \"Most Reviewed\": \"review_count\",\n           };\n    }\n\n    getSortByClass(sortByOption) {\n      if(sortByOption === this.state.sortBy) {\n        return \"active\";\n      }\n      else  {\n          return \"\";\n      }\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({\n            sortBy: sortByOption\n        })\n    }\n\n    handleTermChange(e) {\n        this.setState({\n            term: e.target.value\n        })\n    }\n\n   handleLocationChange(e) {\n        this.setState({\n            location: e.target.value\n        })\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();\n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n          let sortByOptionValue = this.sortByOptions[sortByOption];\n          return (<li className={this.getSortByClass(sortByOptionValue)}\n                      key={sortByOptionValue}\n                      onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n                    {sortByOption}\n                 </li>);\n        });\n      }\n\n\n\n    render() {\n        return(\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                        <ul>\n                            {this.renderSortByOptions()}\n                        </ul>\n                    </div>\n                        <div className=\"SearchBar-fields\">\n                            <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n                            <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n                        </div>\n                    <div className=\"SearchBar-submit\">\n                        <a onClick={this.handleSearch}>Let's Go</a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Searchbar;\n","const apiKey = \"k1mfKLNEZjzoeDTyDfRc8BCDz45ELrIKTIKOf4PGiKr6NCP3ePK1ef4Ic_H4nUXsMiimA5V00gBXyMoWHvM8ZOVZkK9jVdNeyAcdn6WUsWYlBJ4xOQam2k4f-M8CX3Yx\"\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        \n        const queryString = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`;\n       \n        return fetch(queryString, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`,\n            }\n        }).then((response) => {\n         return response.json();\n        }).then((jsonResponse) => {\n            if (jsonResponse[\"businesses\"]) {\n                return jsonResponse[\"businesses\"].map(business => ({\n                       id: business[\"id\"],\n                       imageSrc: business[\"image_url\"],\n                       name: business[\"name\"],\n                       address: business[\"location\"][\"address1\"],\n                       city: business[\"location\"][\"city\"],\n                       state: business[\"location\"][\"state\"],\n                       zipCode: business[\"location\"][\"zip_code\"],\n                       category: business[\"categories\"][\"title\"],\n                       rating: business[\"rating\"],\n                       reviewCount: business[\"review_count\"]\n                    }));\n                }\n              });\n            }\n          };\n          \n\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/Searchbar';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({\n        businesses: businesses\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Local Businesses Search</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses}/>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}